// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PostLighthouseStateOKCode is the HTTP code returned for type PostLighthouseStateOK
const PostLighthouseStateOKCode int = 200

/*PostLighthouseStateOK State changed successfully

swagger:response postLighthouseStateOK
*/
type PostLighthouseStateOK struct {

	/*
	  In: Body
	*/
	Payload *PostLighthouseStateOKBody `json:"body,omitempty"`
}

// NewPostLighthouseStateOK creates PostLighthouseStateOK with default headers values
func NewPostLighthouseStateOK() *PostLighthouseStateOK {

	return &PostLighthouseStateOK{}
}

// WithPayload adds the payload to the post lighthouse state o k response
func (o *PostLighthouseStateOK) WithPayload(payload *PostLighthouseStateOKBody) *PostLighthouseStateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post lighthouse state o k response
func (o *PostLighthouseStateOK) SetPayload(payload *PostLighthouseStateOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostLighthouseStateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostLighthouseStateBadRequestCode is the HTTP code returned for type PostLighthouseStateBadRequest
const PostLighthouseStateBadRequestCode int = 400

/*PostLighthouseStateBadRequest Malformed request

swagger:response postLighthouseStateBadRequest
*/
type PostLighthouseStateBadRequest struct {

	/*
	  In: Body
	*/
	Payload *PostLighthouseStateBadRequestBody `json:"body,omitempty"`
}

// NewPostLighthouseStateBadRequest creates PostLighthouseStateBadRequest with default headers values
func NewPostLighthouseStateBadRequest() *PostLighthouseStateBadRequest {

	return &PostLighthouseStateBadRequest{}
}

// WithPayload adds the payload to the post lighthouse state bad request response
func (o *PostLighthouseStateBadRequest) WithPayload(payload *PostLighthouseStateBadRequestBody) *PostLighthouseStateBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post lighthouse state bad request response
func (o *PostLighthouseStateBadRequest) SetPayload(payload *PostLighthouseStateBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostLighthouseStateBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostLighthouseStateTooManyRequestsCode is the HTTP code returned for type PostLighthouseStateTooManyRequests
const PostLighthouseStateTooManyRequestsCode int = 429

/*PostLighthouseStateTooManyRequests Rate limited (can only change state so often)

swagger:response postLighthouseStateTooManyRequests
*/
type PostLighthouseStateTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *PostLighthouseStateTooManyRequestsBody `json:"body,omitempty"`
}

// NewPostLighthouseStateTooManyRequests creates PostLighthouseStateTooManyRequests with default headers values
func NewPostLighthouseStateTooManyRequests() *PostLighthouseStateTooManyRequests {

	return &PostLighthouseStateTooManyRequests{}
}

// WithPayload adds the payload to the post lighthouse state too many requests response
func (o *PostLighthouseStateTooManyRequests) WithPayload(payload *PostLighthouseStateTooManyRequestsBody) *PostLighthouseStateTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post lighthouse state too many requests response
func (o *PostLighthouseStateTooManyRequests) SetPayload(payload *PostLighthouseStateTooManyRequestsBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostLighthouseStateTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
