// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostLighthouseStateHandlerFunc turns a function with the right signature into a post lighthouse state handler
type PostLighthouseStateHandlerFunc func(PostLighthouseStateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostLighthouseStateHandlerFunc) Handle(params PostLighthouseStateParams) middleware.Responder {
	return fn(params)
}

// PostLighthouseStateHandler interface for that can handle valid post lighthouse state params
type PostLighthouseStateHandler interface {
	Handle(PostLighthouseStateParams) middleware.Responder
}

// NewPostLighthouseState creates a new http.Handler for the post lighthouse state operation
func NewPostLighthouseState(ctx *middleware.Context, handler PostLighthouseStateHandler) *PostLighthouseState {
	return &PostLighthouseState{Context: ctx, Handler: handler}
}

/* PostLighthouseState swagger:route POST /lighthouse/state postLighthouseState

PostLighthouseState post lighthouse state API

*/
type PostLighthouseState struct {
	Context *middleware.Context
	Handler PostLighthouseStateHandler
}

func (o *PostLighthouseState) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostLighthouseStateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostLighthouseStateBadRequestBody post lighthouse state bad request body
//
// swagger:model PostLighthouseStateBadRequestBody
type PostLighthouseStateBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post lighthouse state bad request body
func (o *PostLighthouseStateBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post lighthouse state bad request body based on context it is used
func (o *PostLighthouseStateBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostLighthouseStateBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLighthouseStateBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostLighthouseStateBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostLighthouseStateBody post lighthouse state body
//
// swagger:model PostLighthouseStateBody
type PostLighthouseStateBody struct {

	// address
	Address interface{} `json:"address,omitempty"`

	// state
	State interface{} `json:"state,omitempty"`
}

// Validate validates this post lighthouse state body
func (o *PostLighthouseStateBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post lighthouse state body based on context it is used
func (o *PostLighthouseStateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostLighthouseStateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLighthouseStateBody) UnmarshalBinary(b []byte) error {
	var res PostLighthouseStateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostLighthouseStateOKBody post lighthouse state o k body
//
// swagger:model PostLighthouseStateOKBody
type PostLighthouseStateOKBody struct {

	// MAC Address
	Address string `json:"address,omitempty"`

	// Human readable name
	Name string `json:"name,omitempty"`

	// What state the lighthouse is currently in
	// Enum: [on off booting unknown]
	State string `json:"state,omitempty"`
}

// Validate validates this post lighthouse state o k body
func (o *PostLighthouseStateOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postLighthouseStateOKBodyTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["on","off","booting","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postLighthouseStateOKBodyTypeStatePropEnum = append(postLighthouseStateOKBodyTypeStatePropEnum, v)
	}
}

const (

	// PostLighthouseStateOKBodyStateOn captures enum value "on"
	PostLighthouseStateOKBodyStateOn string = "on"

	// PostLighthouseStateOKBodyStateOff captures enum value "off"
	PostLighthouseStateOKBodyStateOff string = "off"

	// PostLighthouseStateOKBodyStateBooting captures enum value "booting"
	PostLighthouseStateOKBodyStateBooting string = "booting"

	// PostLighthouseStateOKBodyStateUnknown captures enum value "unknown"
	PostLighthouseStateOKBodyStateUnknown string = "unknown"
)

// prop value enum
func (o *PostLighthouseStateOKBody) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postLighthouseStateOKBodyTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostLighthouseStateOKBody) validateState(formats strfmt.Registry) error {
	if swag.IsZero(o.State) { // not required
		return nil
	}

	// value enum
	if err := o.validateStateEnum("postLighthouseStateOK"+"."+"state", "body", o.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post lighthouse state o k body based on context it is used
func (o *PostLighthouseStateOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostLighthouseStateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLighthouseStateOKBody) UnmarshalBinary(b []byte) error {
	var res PostLighthouseStateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostLighthouseStateTooManyRequestsBody post lighthouse state too many requests body
//
// swagger:model PostLighthouseStateTooManyRequestsBody
type PostLighthouseStateTooManyRequestsBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post lighthouse state too many requests body
func (o *PostLighthouseStateTooManyRequestsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post lighthouse state too many requests body based on context it is used
func (o *PostLighthouseStateTooManyRequestsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostLighthouseStateTooManyRequestsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLighthouseStateTooManyRequestsBody) UnmarshalBinary(b []byte) error {
	var res PostLighthouseStateTooManyRequestsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
