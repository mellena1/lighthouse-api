// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetLighthouseHandlerFunc turns a function with the right signature into a get lighthouse handler
type GetLighthouseHandlerFunc func(GetLighthouseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLighthouseHandlerFunc) Handle(params GetLighthouseParams) middleware.Responder {
	return fn(params)
}

// GetLighthouseHandler interface for that can handle valid get lighthouse params
type GetLighthouseHandler interface {
	Handle(GetLighthouseParams) middleware.Responder
}

// NewGetLighthouse creates a new http.Handler for the get lighthouse operation
func NewGetLighthouse(ctx *middleware.Context, handler GetLighthouseHandler) *GetLighthouse {
	return &GetLighthouse{Context: ctx, Handler: handler}
}

/* GetLighthouse swagger:route GET /lighthouse getLighthouse

GetLighthouse get lighthouse API

*/
type GetLighthouse struct {
	Context *middleware.Context
	Handler GetLighthouseHandler
}

func (o *GetLighthouse) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetLighthouseParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetLighthouseOKBody get lighthouse o k body
//
// swagger:model GetLighthouseOKBody
type GetLighthouseOKBody struct {

	// MAC Address
	Address string `json:"address,omitempty"`

	// Human readable name
	Name string `json:"name,omitempty"`

	// What state the lighthouse is currently in
	// Enum: [on off booting unknown]
	State string `json:"state,omitempty"`
}

// Validate validates this get lighthouse o k body
func (o *GetLighthouseOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getLighthouseOKBodyTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["on","off","booting","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getLighthouseOKBodyTypeStatePropEnum = append(getLighthouseOKBodyTypeStatePropEnum, v)
	}
}

const (

	// GetLighthouseOKBodyStateOn captures enum value "on"
	GetLighthouseOKBodyStateOn string = "on"

	// GetLighthouseOKBodyStateOff captures enum value "off"
	GetLighthouseOKBodyStateOff string = "off"

	// GetLighthouseOKBodyStateBooting captures enum value "booting"
	GetLighthouseOKBodyStateBooting string = "booting"

	// GetLighthouseOKBodyStateUnknown captures enum value "unknown"
	GetLighthouseOKBodyStateUnknown string = "unknown"
)

// prop value enum
func (o *GetLighthouseOKBody) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getLighthouseOKBodyTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetLighthouseOKBody) validateState(formats strfmt.Registry) error {
	if swag.IsZero(o.State) { // not required
		return nil
	}

	// value enum
	if err := o.validateStateEnum("getLighthouseOK"+"."+"state", "body", o.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get lighthouse o k body based on context it is used
func (o *GetLighthouseOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetLighthouseOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetLighthouseOKBody) UnmarshalBinary(b []byte) error {
	var res GetLighthouseOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
