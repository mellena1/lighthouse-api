// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostScanHandlerFunc turns a function with the right signature into a post scan handler
type PostScanHandlerFunc func(PostScanParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostScanHandlerFunc) Handle(params PostScanParams) middleware.Responder {
	return fn(params)
}

// PostScanHandler interface for that can handle valid post scan params
type PostScanHandler interface {
	Handle(PostScanParams) middleware.Responder
}

// NewPostScan creates a new http.Handler for the post scan operation
func NewPostScan(ctx *middleware.Context, handler PostScanHandler) *PostScan {
	return &PostScan{Context: ctx, Handler: handler}
}

/* PostScan swagger:route POST /scan postScan

PostScan post scan API

*/
type PostScan struct {
	Context *middleware.Context
	Handler PostScanHandler
}

func (o *PostScan) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostScanParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostScanBadRequestBody post scan bad request body
//
// swagger:model PostScanBadRequestBody
type PostScanBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post scan bad request body
func (o *PostScanBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post scan bad request body based on context it is used
func (o *PostScanBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostScanBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostScanBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostScanBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostScanBody post scan body
//
// swagger:model PostScanBody
type PostScanBody struct {

	// how long to scan for (in seconds)
	// Maximum: 10
	// Minimum: 1
	Timeout int64 `json:"timeout,omitempty"`
}

// Validate validates this post scan body
func (o *PostScanBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTimeout(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostScanBody) validateTimeout(formats strfmt.Registry) error {
	if swag.IsZero(o.Timeout) { // not required
		return nil
	}

	if err := validate.MinimumInt("body"+"."+"timeout", "body", o.Timeout, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("body"+"."+"timeout", "body", o.Timeout, 10, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post scan body based on context it is used
func (o *PostScanBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostScanBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostScanBody) UnmarshalBinary(b []byte) error {
	var res PostScanBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostScanOKBody post scan o k body
//
// swagger:model PostScanOKBody
type PostScanOKBody struct {

	// MAC Address
	Address string `json:"address,omitempty"`

	// Human readable name
	Name string `json:"name,omitempty"`

	// What state the lighthouse is currently in
	// Enum: [on off booting unknown]
	State string `json:"state,omitempty"`
}

// Validate validates this post scan o k body
func (o *PostScanOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postScanOKBodyTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["on","off","booting","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postScanOKBodyTypeStatePropEnum = append(postScanOKBodyTypeStatePropEnum, v)
	}
}

const (

	// PostScanOKBodyStateOn captures enum value "on"
	PostScanOKBodyStateOn string = "on"

	// PostScanOKBodyStateOff captures enum value "off"
	PostScanOKBodyStateOff string = "off"

	// PostScanOKBodyStateBooting captures enum value "booting"
	PostScanOKBodyStateBooting string = "booting"

	// PostScanOKBodyStateUnknown captures enum value "unknown"
	PostScanOKBodyStateUnknown string = "unknown"
)

// prop value enum
func (o *PostScanOKBody) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postScanOKBodyTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostScanOKBody) validateState(formats strfmt.Registry) error {
	if swag.IsZero(o.State) { // not required
		return nil
	}

	// value enum
	if err := o.validateStateEnum("postScanOK"+"."+"state", "body", o.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post scan o k body based on context it is used
func (o *PostScanOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostScanOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostScanOKBody) UnmarshalBinary(b []byte) error {
	var res PostScanOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostScanTooManyRequestsBody post scan too many requests body
//
// swagger:model PostScanTooManyRequestsBody
type PostScanTooManyRequestsBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post scan too many requests body
func (o *PostScanTooManyRequestsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post scan too many requests body based on context it is used
func (o *PostScanTooManyRequestsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostScanTooManyRequestsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostScanTooManyRequestsBody) UnmarshalBinary(b []byte) error {
	var res PostScanTooManyRequestsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
